-- Database: postgres

-- DROP DATABASE postgres;

CREATE DATABASE postgres
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'es_GT.UTF-8'
    LC_CTYPE = 'es_GT.UTF-8'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;

COMMENT ON DATABASE postgres
    IS 'default administrative connection database';

------------------------------------ CREANDO TABLA TEMPORAL ------------------------------------
CREATE TABLE temporal(
	NOMBRE_CLIENTE VARCHAR,
	CORREO_CLIENTE VARCHAR,
	CLIENTE_ACTIVO VARCHAR,
	FECHA_CREACION VARCHAR,
	TIENDA_PREFERIDA VARCHAR,
	DIRECCION_CLIENTE VARCHAR,
	CODIGO_POSTAL_CLIENTE VARCHAR,
	CIUDAD_CLIENTE VARCHAR,
	PAIS_CLIENTE VARCHAR,
	FECHA_RENTA VARCHAR,
	FECHA_RETORNO VARCHAR,
	MONTO_A_PAGAR VARCHAR,
	FECHA_PAGO VARCHAR,
	NOMBRE_EMPLEADO VARCHAR,
	CORREO_EMPLEADO VARCHAR,
	EMPLEADO_ACTIVO VARCHAR,
	TIENDA_EMPLEADO VARCHAR,
	USUARIO_EMPLEADO VARCHAR,
	PASSWORD_EMPLEADO VARCHAR,
	DIRECCION_EMPLEADO VARCHAR,
	CODIGO_POSTAL_EMPLEADO VARCHAR,
	CIUDAD_EMPLEADO VARCHAR,
	PAIS_EMPLEADO VARCHAR,
	NOMBRE_TIENDA VARCHAR,
	ENCARGADO_TIENDA VARCHAR,
	DIRECCION_TIENDA VARCHAR,
	CODIGO_POSTAL_TIENDA VARCHAR,
	CIUDAD_TIENDA VARCHAR,
	PAIS_TIENDA VARCHAR,
	TIENDA_PELICULA VARCHAR,
	NOMBRE_PELICULA VARCHAR,
	DESCRIPCION_PELICULA VARCHAR,
	LANZAMIENTO_YEAR VARCHAR,
	DIAS_RENTA VARCHAR,
	COSTO_RENTA	VARCHAR,
	DURACION VARCHAR,
	COSTO_POR_DAMAGE VARCHAR,
	CLASIFICACION VARCHAR,
	LENGUAJE_PELICULA VARCHAR,
	CATEGORIA_PELICULA VARCHAR,
	ACTOR_PELICULA VARCHAR
);
	
-- MOSTRAR CONTENIDO DE LA TABLA TEMPORAL.
SELECT*FROM temporal;
-- ELIMINA LOS DATOS DE LA TABLA TEMPORAL.
DELETE FROM temporal;
-- ELIMINAR TABLA TEMPORAL.
DROP TABLE temporal;

------------------------------------ LLENA LA TALBA TEMPORAL MASIVAMENTE ------------------------------------
COPY temporal from '/home/abraham/Escritorio/BlockbusterData.csv' USING delimiters ';' csv header encoding 'windows-1251';

------------------------------------ CREANDO TABLA PAIS ------------------------------------
CREATE TABLE pais(
  id_pais INT GENERATED BY DEFAULT AS IDENTITY,
  nombre VARCHAR,
  primary key (id_pais)
 );

-- MUESTRA EL CONTENIDO DE LA TABLA PAIS.
SELECT*FROM pais;
-- ELIMINA LOS DATOS DE LA TEMPORAL
DELETE FROM pais;
-- ELIMINA LA TABLA PAIS
DROP TABLE pais;


-- CREANDO DATOS DE PAIS
INSERT INTO pais(nombre)
SELECT DISTINCT temporal.PAIS_CLIENTE FROM temporal
WHERE temporal.PAIS_CLIENTE != '-';
-- MOSTRANDO CANTIDAD DE PAIS
SELECT COUNT(pais.nombre) from pais;

------------------------------------ CREANDO TABLA CIUDAD ------------------------------------
CREATE TABLE ciudad(
	id_ciudad INT GENERATED BY DEFAULT AS IDENTITY,
	nombre VARCHAR,
	id_pais INT,
  	primary key (id_ciudad),
	FOREIGN KEY (id_pais) REFERENCES pais(id_pais)
);
-- LLENANDO TABLA CIUDAD
INSERT INTO ciudad(nombre, id_pais)
SELECT DISTINCT temporal.CIUDAD_CLIENTE, pais.id_pais
FROM temporal INNER JOIN pais ON pais.nombre = temporal.PAIS_CLIENTE
WHERE temporal.CIUDAD_CLIENTE != '-';
-- MOSTRAR TABLA CIUDAD
SELECT * FROM ciudad;
-- ELIMINAR DATOS CIUDAD
DELETE FROM ciudad;
-- ELMINAR TABLA CIUDAD
DROP TABLE ciudad;

------------------------------------ CREANDO TABLA DIRECCION ------------------------------------
CREATE TABLE direccion(
	id_direccion INT GENERATED BY DEFAULT AS IDENTITY,
	nombre_direccion VARCHAR,
	codigo_postal VARCHAR,
	id_ciudad INT,
  	primary key (id_direccion),
	FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad)
);

INSERT INTO direccion(nombre_direccion, codigo_postal, id_ciudad)
SELECT DISTINCT ON(temporal.DIRECCION_CLIENTE) temporal.DIRECCION_CLIENTE, temporal.CODIGO_POSTAL_CLIENTE, ciudad.id_ciudad
FROM temporal INNER JOIN ciudad ON ciudad.nombre = temporal.CIUDAD_CLIENTE
WHERE temporal.DIRECCION_CLIENTE != '-';


-- MOSTRAR DATOS DIRECCION
SELECT * FROM direccion;
-- ELIMINAR DATOS DE DIRECCION
DELETE FROM direccion;
-- ELMINAR TABLA DIRECCION
DROP TABLE direccion;


------------------------------------ DESCOMPONER NOMBRE_CLIENTE ------------------------------------
-- SELECT temporal.NOMBRE_CLIENTE,split_part(temporal.NOMBRE_CLIENTE,' ',1) AS CLIENTE_NOMBRE, split_part(temporal.NOMBRE_CLIENTE,' ',2) AS CLIENTE_APELLIDO FROM temporal;

------------------------------------ CREANDO TABLA TIENDA ------------------------------------
CREATE TABLE tienda(
	id_tienda INT GENERATED BY DEFAULT AS IDENTITY,
	nombre VARCHAR,
	id_direccion INT,
	PRIMARY KEY(id_tienda),
	FOREIGN KEY(id_direccion) REFERENCES direccion(id_direccion)
);

-- MOSTRAR DATOS DE LA TABLA TIENDA
SELECT * FROM tienda;
-- ELIMINAR DATOS DE LA TABLA TIENDA
DELETE FROM tienda;
-- ELIMINAR TIENDA
DROP TABLE tienda;

-- LLENAR TABLA DE TIENDA
INSERT INTO tienda(nombre,id_direccion)
SELECT DISTINCT ON(temporal.NOMBRE_TIENDA) temporal.NOMBRE_TIENDA, direccion.id_direccion
FROM temporal INNER JOIN direccion ON direccion.nombre_direccion = temporal.DIRECCION_TIENDA
WHERE temporal.NOMBRE_TIENDA != '-';


------------------------------------ CREANDO TABLA EMPLEADO ------------------------------------
CREATE TABLE empleado(
	id_empleado INT GENERATED BY DEFAULT AS IDENTITY,
	nombre VARCHAR,
	apellido VARCHAR,
	correo VARCHAR,
	nombre_usuario VARCHAR,
	contrasena VARCHAR,
	estado VARCHAR,
	id_direccion INT,
	id_tienda INT,
  	primary key (id_empleado),
	FOREIGN KEY (id_direccion) REFERENCES direccion(id_direccion),
	FOREIGN KEY (id_tienda) REFERENCES tienda(id_tienda)
);

-- MOSTRAR TABLA EMPLEADO
SELECT * FROM empleado;
-- ELIMINAR DATOS DE LA TABLA EMPLEADO
DELETE FROM empleado;
-- ELIMINAR TABLA EMPLEADO
DROP TABLE empleado;

-- LLENANDO LA TABLA EMPLEADO
INSERT INTO empleado(nombre,apellido,correo,nombre_usuario,contrasena,estado,id_direccion,id_tienda)
SELECT DISTINCT ON(temporal.NOMBRE_EMPLEADO) split_part(temporal.NOMBRE_EMPLEADO,' ',1), split_part(temporal.NOMBRE_EMPLEADO,' ',2),temporal.CORREO_EMPLEADO,temporal.USUARIO_EMPLEADO,temporal.PASSWORD_EMPLEADO,temporal.EMPLEADO_ACTIVO,direccion.id_direccion,tienda.id_tienda 
FROM temporal 
	INNER JOIN direccion ON direccion.nombre_direccion = temporal.DIRECCION_EMPLEADO
	INNER JOIN tienda ON tienda.nombre = temporal.TIENDA_EMPLEADO
WHERE temporal.NOMBRE_EMPLEADO != '-';


------------------------------------ CREANDO TABLA ENCARGADO_TIENDA ------------------------------------
CREATE TABLE encargado_tienda(
	id_encargado_tienda INT GENERATED BY DEFAULT AS IDENTITY,
	id_empleado INT,
	id_tienda INT,
	PRIMARY KEY (id_encargado_tienda),
	FOREIGN KEY (id_empleado) REFERENCES empleado(id_empleado),
	FOREIGN KEY (id_tienda) REFERENCES tienda(id_tienda)
);

-- MOSTRAR DATOS DE LA TABLA ENCARGADO_TIENDA
SELECT * FROM encargado_tienda;
-- ELIMINAR DATOS DE LA TABLA ENCARGADO_TIENDA
DELETE FROM encargado_tienda;
-- ELIMINAR TABLA ENCARGADO_TIENDA
DROP TABLE encargado_tienda;

-- LLENAR TABLA DE ENCARGADO_TIENDA
INSERT INTO encargado_tienda(id_empleado,id_tienda)
SELECT DISTINCT empleado.id_empleado, tienda.id_tienda
FROM temporal 
	INNER JOIN empleado ON empleado.nombre = split_part(temporal.ENCARGADO_TIENDA,' ',1) and empleado.apellido = split_part(temporal.ENCARGADO_TIENDA,' ',2)
	INNER JOIN tienda ON tienda.nombre = temporal.NOMBRE_TIENDA




------------------------------------ CREANDO TABLA CLIENTE ------------------------------------
CREATE TABLE cliente(
	id_cliente INT GENERATED BY DEFAULT AS IDENTITY,
	nombre VARCHAR,
	apellido VARCHAR,
	correo VARCHAR,
	fecha_registro VARCHAR,
	estado VARCHAR,
	id_direccion INT,
	id_tienda INT,
	PRIMARY KEY (id_cliente),
	FOREIGN KEY (id_direccion) REFERENCES direccion(id_direccion),
	FOREIGN KEY (id_tienda) REFERENCES tienda(id_tienda)
);

-- MOSTRAR DATOS DE LA TABLA CLIENTE
SELECT * FROM cliente;
-- ELIMINAR DATOS DE LA TABLA CLIENTE
DELETE FROM cliente;
-- ELIMINAR TABLA CLIENTE
DROP TABLE cliente;

-- LLENAR TABLA CLIENTE
INSERT INTO cliente(nombre,apellido,correo,fecha_registro,estado,id_direccion,id_tienda)
SELECT DISTINCT ON(temporal.NOMBRE_CLIENTE) split_part(temporal.NOMBRE_CLIENTE,' ',1), split_part(temporal.NOMBRE_CLIENTE,' ',2),temporal.CORREO_CLIENTE,temporal.FECHA_CREACION,temporal.CLIENTE_ACTIVO,direccion.id_direccion,tienda.id_tienda 
FROM temporal 
	INNER JOIN direccion ON direccion.nombre_direccion = temporal.DIRECCION_CLIENTE
	INNER JOIN tienda ON tienda.nombre = temporal.TIENDA_PREFERIDA
WHERE temporal.NOMBRE_CLIENTE != '-';


------------------------------------ INFORMACION CLASIFICACION ------------------------------------
CREATE TABLE clasificacion(
	id_clasificacion INT GENERATED BY DEFAULT AS IDENTITY,
	nombre_clasificacion VARCHAR,
	PRIMARY KEY(id_clasificacion)
);

-- MOSTRAR DATOS DE LA TABLA CLASIFICACION
SELECT*FROM clasificacion;
-- ELIMINAR DATOS DE LA TABLA CLASIFICACION
DELETE FROM clasificacion;
-- ELIMINAR TABLA CLASIFICACION
DROP TABLE clasificacion;

-- LLENAR DATOS A LA TABLA CLASIFICACION
INSERT INTO clasificacion(nombre_clasificacion)
SELECT DISTINCT ON(temporal.CLASIFICACION) temporal.CLASIFICACION FROM temporal
WHERE temporal.CLASIFICACION != '-'



------------------------------------ PELICULA ------------------------------------
CREATE TABLE pelicula(
	id_pelicula INT GENERATED BY DEFAULT AS IDENTITY,
	titulo VARCHAR,
	descripcion VARCHAR,
	lanzamiento VARCHAR,
	duracion VARCHAR, 
	dias_renta VARCHAR,
	costo_renta VARCHAR,
	costo_por_damage VARCHAR,
	id_clasificacion INT,
	PRIMARY KEY(id_pelicula),
	FOREIGN KEY(id_clasificacion) REFERENCES clasificacion(id_clasificacion)
);

-- MOSTRAR DATOS DE LA TABLA PELICULA
SELECT*FROM pelicula;
-- ELIMINAR DATOS DE LA TABLA PELICULA
DELETE FROM pelicula;
-- ELIMINAR TABLA DE LA TABLA PELICULA
DROP TABLE pelicula;

-- LLENAR DATOS DE LA TABLA PELICULA
INSERT INTO pelicula(titulo,descripcion,lanzamiento,duracion,dias_renta,costo_renta,costo_por_damage,id_clasificacion)
SELECT DISTINCT ON(temporal.NOMBRE_PELICULA) temporal.NOMBRE_PELICULA,temporal.DESCRIPCION_PELICULA,temporal.LANZAMIENTO_YEAR,temporal.DURACION,temporal.DIAS_RENTA,temporal.COSTO_RENTA, temporal.COSTO_POR_DAMAGE,clasificacion.id_clasificacion 
FROM temporal
	INNER JOIN clasificacion ON clasificacion.nombre_clasificacion = temporal.CLASIFICACION
WHERE temporal.NOMBRE_PELICULA != '-'


------------------------------------ LENGUAJE ------------------------------------
CREATE TABLE lenguaje(
	id_lenguaje INT GENERATED BY DEFAULT AS IDENTITY,
	nombre_lenguaje VARCHAR,
	PRIMARY KEY(id_lenguaje)
);

-- MOSTRAR DATOS DE LA TABLA LENGUAJE
SELECT*FROM lenguaje;
-- ELIMINAR DATOS DE LA TABLA LENGUAJE
DELETE FROM lenguaje;
-- ELIMINAR TABLA LENGUAJE
DROP TABLE lenguaje;

-- LLENAR DATOS DE LA TABLA LENGUAJE
INSERT INTO lenguaje(nombre_lenguaje)
SELECT DISTINCT ON(temporal.LENGUAJE_PELICULA) temporal.LENGUAJE_PELICULA FROM temporal
WHERE temporal.LENGUAJE_PELICULA != '-';


------------------------------------ CATEGORIA ------------------------------------
CREATE TABLE categoria(
	id_categoria INT GENERATED BY DEFAULT AS IDENTITY,
	nombre_categoria VARCHAR,
	PRIMARY KEY(id_categoria)
);

-- MOSTRAR DATOS DE LA TABLA CATEGORIA
SELECT*FROM categoria;
-- ELIMINAR DATOS DE LA TABLA CATEGORIA
DELETE FROM categoria;
-- ELIMINAR TABLA CATEGORIA
DROP TABLE categoria;

-- LLENAR DATOS DE LA TABLA CATEGORIA
INSERT INTO categoria(nombre_categoria)
SELECT DISTINCT ON(temporal.CATEGORIA_PELICULA) temporal.CATEGORIA_PELICULA FROM temporal
WHERE temporal.CATEGORIA_PELICULA != '-';

------------------------------------ ACTOR ------------------------------------
CREATE TABLE actor(
	id_actor INT GENERATED BY DEFAULT AS IDENTITY,
	nombre_actor VARCHAR,
	PRIMARY KEY(id_actor)
);

-- MOSTRAR DATOS DE LA TABLA ACTOR
SELECT*FROM actor;
-- ELIMINAR DATOS DE LA TABLA ACTOR
DELETE FROM actor;
-- ELIMINAR TABLA ACTOR
DROP TABLE actor;

-- LLENAR DATOS DE LA TABLA ACTOR
INSERT INTO actor(nombre_actor)
SELECT DISTINCT ON(temporal.ACTOR_PELICULA) temporal.ACTOR_PELICULA FROM temporal
WHERE temporal.ACTOR_PELICULA != '-';




------------------------------------ LENGUAJE_PELICULA ------------------------------------
CREATE TABLE lenguaje_pelicula(
	id_lenguaje_pelicula INT GENERATED BY DEFAULT AS IDENTITY,
	id_lenguaje INT,
	id_pelicula INT,
	PRIMARY KEY(id_lenguaje_pelicula),
	FOREIGN KEY(id_lenguaje) REFERENCES lenguaje(id_lenguaje),
	FOREIGN KEY(id_pelicula) REFERENCES pelicula(id_pelicula)
);
-- MOSTRAR DATOS DE LA TABLA LENGUAJE_PELICULA
SELECT * FROM lenguaje_pelicula;
-- ELIMINAR DATOS DE LA TABLA LENGUAJE_PELICULA
DELETE FROM lenguaje_pelicula;
-- ELIMINAR TABLA LENGUAJE_PELICULA
DROP TABLE lenguaje_pelicula;

-- LLENAR TABLA DE LENGUAJE_PELICULA
INSERT INTO lenguaje_pelicula(id_lenguaje,id_pelicula)
SELECT DISTINCT lenguaje.id_lenguaje, pelicula.id_pelicula
FROM temporal 
	INNER JOIN lenguaje ON lenguaje.nombre_lenguaje = temporal.LENGUAJE_PELICULA
	INNER JOIN pelicula ON pelicula.titulo = temporal.NOMBRE_PELICULA
	
	
------------------------------------ CATEGORIA_PELICULA ------------------------------------
CREATE TABLE categoria_pelicula(
	id_categoria_pelicula INT GENERATED BY DEFAULT AS IDENTITY,
	id_pelicula INT,
	id_categoria INT,
	PRIMARY KEY(id_categoria_pelicula),
	FOREIGN KEY(id_pelicula) REFERENCES pelicula(id_pelicula),
	FOREIGN KEY(id_categoria) REFERENCES categoria(id_categoria)
);
-- MOSTRAR DATOS DE LA TABLA CATEGORIA_PELICULA
SELECT * FROM categoria_pelicula;
-- ELIMINAR DATOS DE LA TABLA CATEGORIA_PELICULA
DELETE FROM categoria_pelicula;
-- ELIMINAR TABLA CATEGORIA_PELICULA
DROP TABLE categoria_pelicula;

-- LLENAR TABLA DE CATEGORIA_PELICULA
INSERT INTO categoria_pelicula(id_pelicula, id_categoria)
SELECT DISTINCT pelicula.id_pelicula, categoria.id_categoria
FROM temporal 
	INNER JOIN pelicula ON pelicula.titulo = temporal.NOMBRE_PELICULA
	INNER JOIN categoria ON categoria.nombre_categoria = temporal.CATEGORIA_PELICULA
	
	
------------------------------------ ACTOR_PELICULA ------------------------------------
CREATE TABLE actor_pelicula(
	id_actor_pelicula INT GENERATED BY DEFAULT AS IDENTITY,
	id_pelicula INT,
	id_actor INT,
	PRIMARY KEY(id_actor_pelicula),
	FOREIGN KEY(id_pelicula) REFERENCES pelicula(id_pelicula),
	FOREIGN KEY(id_actor) REFERENCES actor(id_actor)
);

-- MOSTRAR DATOS DE LA TABLA ACTOR_PELICULA
SELECT * FROM actor_pelicula;
-- ELIMINAR DATOS DE LA TABLA ACTOR_PELICULA
DELETE FROM actor_pelicula;
-- ELIMINAR TABLA ACTOR_PELICULA
DROP TABLE actor_pelicula;

-- LLENAR TABLA DE ACTOR_PELICULA
INSERT INTO actor_pelicula(id_pelicula, id_actor)
SELECT DISTINCT pelicula.id_pelicula, actor.id_actor
FROM temporal 
	INNER JOIN pelicula ON pelicula.titulo = temporal.NOMBRE_PELICULA
	INNER JOIN actor ON actor.nombre_actor = temporal.ACTOR_PELICULA
	
------------------------------------ INVENTARIO ------------------------------------
CREATE TABLE inventario(
	id_inventario INT GENERATED BY DEFAULT AS IDENTITY,
	id_pelicula INT,
	id_tienda INT,
	PRIMARY KEY(id_inventario),
	FOREIGN KEY(id_pelicula) REFERENCES pelicula(id_pelicula),
	FOREIGN KEY(id_tienda) REFERENCES tienda(id_tienda)
);

-- MOSTRAR DATOS DE LA TABLA INVENTARIO
SELECT * FROM inventario;
-- ELIMINAR DATOS DE LA TABLA INVENTARIO
DELETE FROM inventario;
-- ELIMINAR TABLA INVENTARIO
DROP TABLE inventario;

-- LLENAR TABLA DE INVENTARIO
INSERT INTO inventario(id_pelicula, id_tienda)
SELECT DISTINCT pelicula.id_pelicula, tienda.id_tienda
FROM temporal 
	INNER JOIN pelicula ON pelicula.titulo = temporal.NOMBRE_PELICULA
	INNER JOIN tienda ON tienda.nombre = temporal.TIENDA_PELICULA
		


------------------------------------ RENTA ------------------------------------
CREATE TABLE renta(
	id_renta INT GENERATED BY DEFAULT AS IDENTITY,
	monto VARCHAR,
	fecha_pago VARCHAR,
	fecha_renta VARCHAR,
	fecha_retorno VARCHAR,
	id_empleado INT,
	id_tienda INT,
	id_cliente INT,
	PRIMARY KEY(id_renta),
	FOREIGN KEY(id_empleado) REFERENCES empleado(id_empleado),
	FOREIGN KEY(id_tienda) REFERENCES tienda(id_tienda),
	FOREIGN KEY(id_cliente) REFERENCES cliente(id_cliente)
);

-- MOSTRAR DATOS DE LA TABLA RENTA
SELECT * FROM renta;
-- ELIMINAR DATOS DE LA TABLA RENTA
DELETE FROM renta;
-- ELIMINAR TABLA RENTA
DROP TABLE renta;

-- LLENAR TABLA RENTA
INSERT INTO renta(monto,fecha_pago,fecha_renta,fecha_retorno,id_empleado,id_tienda,id_cliente)
SELECT DISTINCT temporal.MONTO_A_PAGAR,temporal.FECHA_PAGO,temporal.FECHA_RENTA,temporal.FECHA_RETORNO,empleado.id_empleado,tienda.id_tienda,cliente.id_cliente
FROM temporal
	INNER JOIN empleado ON empleado.nombre = split_part(temporal.NOMBRE_EMPLEADO,' ',1) and empleado.apellido = split_part(temporal.NOMBRE_EMPLEADO,' ',2)
	INNER JOIN tienda ON tienda.nombre = temporal.TIENDA_PELICULA
	INNER JOIN cliente ON cliente.nombre = split_part(temporal.NOMBRE_CLIENTE,' ',1) and cliente.apellido = split_part(temporal.NOMBRE_CLIENTE,' ',2)
	



------------------------------------ INFORMACION TIENDA ------------------------------------
-- SELECT encargado_tienda.id_encargado_tienda,tienda.nombre, empleado.nombre, empleado.apellido
-- FROM encargado_tienda
--  	INNER JOIN tienda on tienda.id_tienda = encargado_tienda.id_tienda
--  	INNER JOIN empleado on empleado.id_empleado = encargado_tienda.id_empleado

------------------------------------ COUNT ------------------------------------
-- SELECT COUNT(actor.nombre_actor) from actor; 									-- ACTOR 		 	 	199
-- SELECT COUNT(categoria.nombre_categoria) from categoria; 						-- CATEGORIA 	 	 	16
-- SELECT COUNT(ciudad.nombre) from ciudad; 										-- CIUDAD		 	 	600
-- SELECT COUNT(clasificacion.nombre_clasificacion) from clasificacion; 			-- CLASIFICACION 	 	5
-- SELECT COUNT(cliente.nombre) from cliente;										-- CLIENTE		 	 	599
-- SELECT COUNT(direccion.nombre_direccion) from direccion; 						-- DIRECCION	 	 	603
-- SELECT COUNT(empleado.nombre) from empleado; 									-- EMPLEADO		 	 	2
-- SELECT COUNT(encargado_tienda.id_empleado) from encargado_tienda;				-- ENCARGADO_TIENDA  	2
-- SELECT COUNT(inventario.id_inventario) from inventario; 							-- INVENTARIO		 	1521
-- SELECT COUNT(lenguaje.nombre_lenguaje) from lenguaje; 							-- LENGUAJE			 	6
-- SELECT COUNT(pais.nombre) from pais; 											-- PAIS				 	109
-- SELECT COUNT(pelicula.titulo) from pelicula; 									-- PELICULA			 	1000
-- SELECT COUNT(actor_pelicula.id_actor_pelicula) from actor_pelicula; 				-- ACTOR_PELICULA	 	5462						
-- SELECT COUNT(categoria_pelicula.id_categoria_pelicula) from categoria_pelicula; 	-- CATEGORIA_PELICULA 	1000 						
-- SELECT COUNT(lenguaje_pelicula.id_lenguaje_pelicula) from lenguaje_pelicula; 	-- LENGUAJE_PELICULA	1000  						
-- SELECT COUNT(renta.id_renta) from renta; 										-- RENTA				16045  
-- SELECT COUNT(tienda.nombre) from tienda; 										-- TIENDA				2

--- 											ELIMINAR TODO
-- ELIMINAR DATOS DE LA TABLA RENTA
DELETE FROM renta;
-- ELIMINAR TABLA RENTA
DROP TABLE renta;
-- ELIMINAR DATOS DE LA TABLA INVENTARIO
DELETE FROM inventario;
-- ELIMINAR TABLA INVENTARIO
DROP TABLE inventario;
-- ELIMINAR DATOS DE LA TABLA ACTOR_PELICULA
DELETE FROM actor_pelicula;
-- ELIMINAR TABLA ACTOR_PELICULA
DROP TABLE actor_pelicula;
-- ELIMINAR DATOS DE LA TABLA CATEGORIA_PELICULA
DELETE FROM categoria_pelicula;
-- ELIMINAR TABLA CATEGORIA_PELICULA
DROP TABLE categoria_pelicula;
-- ELIMINAR DATOS DE LA TABLA LENGUAJE_PELICULA
DELETE FROM lenguaje_pelicula;
-- ELIMINAR TABLA LENGUAJE_PELICULA
DROP TABLE lenguaje_pelicula;
-- ELIMINAR DATOS DE LA TABLA ACTOR
DELETE FROM actor;
-- ELIMINAR TABLA ACTOR
DROP TABLE actor;
-- ELIMINAR DATOS DE LA TABLA CATEGORIA
DELETE FROM categoria;
-- ELIMINAR TABLA CATEGORIA
DROP TABLE categoria;
-- ELIMINAR DATOS DE LA TABLA LENGUAJE
DELETE FROM lenguaje;
-- ELIMINAR TABLA LENGUAJE
DROP TABLE lenguaje;
-- ELIMINAR DATOS DE LA TABLA PELICULA
DELETE FROM pelicula;
-- ELIMINAR TABLA DE LA TABLA PELICULA
DROP TABLE pelicula;
-- ELIMINAR DATOS DE LA TABLA CLASIFICACION
DELETE FROM clasificacion;
-- ELIMINAR TABLA CLASIFICACION
DROP TABLE clasificacion;
-- ELIMINAR DATOS DE LA TABLA CLIENTE
DELETE FROM cliente;
-- ELIMINAR TABLA CLIENTE
DROP TABLE cliente;
-- ELIMINAR DATOS DE LA TABLA ENCARGADO_TIENDA
DELETE FROM encargado_tienda;
-- ELIMINAR TABLA ENCARGADO_TIENDA
DROP TABLE encargado_tienda;
-- ELIMINAR DATOS DE LA TABLA EMPLEADO
DELETE FROM empleado;
-- ELIMINAR TABLA EMPLEADO
DROP TABLE empleado;
-- ELIMINAR DATOS DE LA TABLA TIENDA
DELETE FROM tienda;
-- ELIMINAR TIENDA
DROP TABLE tienda;
-- ELIMINAR DATOS DE DIRECCION
DELETE FROM direccion;
-- ELMINAR TABLA DIRECCION
DROP TABLE direccion;
-- ELIMINAR DATOS CIUDAD
DELETE FROM ciudad;
-- ELMINAR TABLA CIUDAD
DROP TABLE ciudad;
-- ELIMINA LOS DATOS DE LA TEMPORAL
DELETE FROM pais;
-- ELIMINA LA TABLA PAIS
DROP TABLE pais;
-- ELIMINA LOS DATOS DE LA TABLA TEMPORAL.
DELETE FROM temporal;
-- ELIMINAR TABLA TEMPORAL.
DROP TABLE temporal;