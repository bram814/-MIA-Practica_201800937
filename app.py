from flask import Flask, jsonify, request
from flask_cors import CORS
import psycopg2
import os


app = Flask(__name__)
CORS(app)

DB_HOST = "localhost"
DB_NAME = "postgres"
DB_USER = "postgres"
DB_PASS = "password"

try:
    CONECTION = psycopg2.connect(
        dbname = DB_NAME,
        user = DB_USER,
        password = DB_PASS,
        host = DB_HOST)
    
    cur = CONECTION.cursor()
    
    
    @app.route('/')
    def index():
        return "hola mundo"

    @app.route('/eliminarTemporal', methods=['GET']) # ELIMINA DATOS DE LA TABLA TEMPORAL
    def delete_data_temp():
        try:
            cur.execute('DELETE FROM temporal;')
            CONECTION.commit()
        except Exception as e:
            return f"{e}"
        return "DATOS DE LA TABLA TEMPORAL ELIMINADOS!"

    @app.route('/eliminarModelo', methods=['GET']) # ELIMINA TABLA TEMPORAL
    def delete_temp():
        try:
            cur.execute('DROP TABLE temporal;')
            CONECTION.commit()
        except Exception as e:
            return f"{e}"
        return "TABLA TEMPORAL ELIMINADA!"

    @app.route('/cargarTemporal', methods=['GET'])
    def cargar_temporal():
        try:
            # CREA LA TABLA TEMPORAL
            TABLE_TEMPORAL = '''CREATE TABLE temporal(
                NOMBRE_CLIENTE VARCHAR,
                CORREO_CLIENTE VARCHAR,
                CLIENTE_ACTIVO VARCHAR,
                FECHA_CREACION VARCHAR,
                TIENDA_PREFERIDA VARCHAR,
                DIRECCION_CLIENTE VARCHAR,
                CODIGO_POSTAL_CLIENTE VARCHAR,
                CIUDAD_CLIENTE VARCHAR,
                PAIS_CLIENTE VARCHAR,
                FECHA_RENTA VARCHAR,
                FECHA_RETORNO VARCHAR,
                MONTO_A_PAGAR VARCHAR,
                FECHA_PAGO VARCHAR,
                NOMBRE_EMPLEADO VARCHAR,
                CORREO_EMPLEADO VARCHAR,
                EMPLEADO_ACTIVO VARCHAR,
                TIENDA_EMPLEADO VARCHAR,
                USUARIO_EMPLEADO VARCHAR,
                PASSWORD_EMPLEADO VARCHAR,
                DIRECCION_EMPLEADO VARCHAR,
                CODIGO_POSTAL_EMPLEADO VARCHAR,
                CIUDAD_EMPLEADO VARCHAR,
                PAIS_EMPLEADO VARCHAR,
                NOMBRE_TIENDA VARCHAR,
                ENCARGADO_TIENDA VARCHAR,
                DIRECCION_TIENDA VARCHAR,
                CODIGO_POSTAL_TIENDA VARCHAR,
                CIUDAD_TIENDA VARCHAR,
                PAIS_TIENDA VARCHAR,
                TIENDA_PELICULA VARCHAR,
                NOMBRE_PELICULA VARCHAR,
                DESCRIPCION_PELICULA VARCHAR,
                LANZAMIENTO_YEAR VARCHAR,
                DIAS_RENTA VARCHAR,
                COSTO_RENTA	VARCHAR,
                DURACION VARCHAR,
                COSTO_POR_DAMAGE VARCHAR,
                CLASIFICACION VARCHAR,
                LENGUAJE_PELICULA VARCHAR,
                CATEGORIA_PELICULA VARCHAR,
                ACTOR_PELICULA VARCHAR)'''
            cur.execute(TABLE_TEMPORAL)
            # CARGA LOS DATOS A LA TABLA TEMPORAL
            CHARGE_MASIVE_CSV = '''COPY temporal from '/home/abraham/Escritorio/BlockbusterData.csv' USING delimiters ';' csv header encoding 'windows-1251';'''
            cur.execute(CHARGE_MASIVE_CSV)
            
            CONECTION.commit()
            # rows = cur.fetchall() # SOLO PARA SELECT
        except Exception as e:
            return f"{e}"

        return "TABLA TEMPORAL CREADA!"


    @app.route('/cargarModelo', methods=['GET'])
    def cargar_modelo():
        try:
            # ------------------------- CREA LA TABLA PAIS ------------------------- 
            TABLE_PAIS =  '''
            CREATE TABLE pais(
                id_pais INT GENERATED BY DEFAULT AS IDENTITY,
                nombre VARCHAR,
                primary key (id_pais)
            );'''
            cur.execute(TABLE_PAIS)
            # LLENA LA TABLA PAIS
            CHARGE_TABLE_PAIS = '''
            INSERT INTO pais(nombre)
                SELECT DISTINCT temporal.PAIS_CLIENTE FROM temporal
                WHERE temporal.PAIS_CLIENTE != '-';'''
            cur.execute(CHARGE_TABLE_PAIS)
            # ------------------------- CREA LA TABLA CIUDAD ------------------------- 
            TABLE_CIUDAD = '''
            CREATE TABLE ciudad(
                id_ciudad INT GENERATED BY DEFAULT AS IDENTITY,
                nombre VARCHAR,
                id_pais INT,
                primary key (id_ciudad),
                FOREIGN KEY (id_pais) REFERENCES pais(id_pais)
            );'''
            cur.execute(TABLE_CIUDAD)
            # LLENA LA TABLA CIUDAD
            CHARGE_TABLE_CIUDAD = '''
            INSERT INTO ciudad(nombre, id_pais)
                SELECT DISTINCT temporal.CIUDAD_CLIENTE, pais.id_pais
                FROM temporal INNER JOIN pais ON pais.nombre = temporal.PAIS_CLIENTE
                WHERE temporal.CIUDAD_CLIENTE != '-';'''
            cur.execute(CHARGE_TABLE_CIUDAD)
            # ------------------------- CREA LA TABLA DIRECCION ------------------------- 
            TABLE_DIRECCION = '''
            CREATE TABLE direccion(
                id_direccion INT GENERATED BY DEFAULT AS IDENTITY,
                nombre_direccion VARCHAR,
                codigo_postal VARCHAR,
                id_ciudad INT,
                primary key (id_direccion),
                FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad));'''
            cur.execute(TABLE_DIRECCION)
            # LLENA LA TABLA DIRECCION
            CHARGE_TABLE_DIRECCION = '''
            INSERT INTO direccion(nombre_direccion, codigo_postal, id_ciudad)
                SELECT DISTINCT ON(temporal.DIRECCION_CLIENTE) temporal.DIRECCION_CLIENTE, temporal.CODIGO_POSTAL_CLIENTE, ciudad.id_ciudad
                FROM temporal INNER JOIN ciudad ON ciudad.nombre = temporal.CIUDAD_CLIENTE
                WHERE temporal.DIRECCION_CLIENTE != '-';'''
            cur.execute(CHARGE_TABLE_DIRECCION)
            # ------------------------- CREA LA TABLA TIENDA ------------------------- 
            TABLE_TIENDA = '''
            CREATE TABLE tienda(
                id_tienda INT GENERATED BY DEFAULT AS IDENTITY,
                nombre VARCHAR,
                id_direccion INT,
                PRIMARY KEY(id_tienda),
                FOREIGN KEY(id_direccion) REFERENCES direccion(id_direccion)
            );'''
            cur.execute(TABLE_TIENDA)
            # LLENA LA TABLA TIENDA
            CHARGE_TABLE_TIENDA = '''
            INSERT INTO tienda(nombre,id_direccion)
                SELECT DISTINCT ON(temporal.NOMBRE_TIENDA) temporal.NOMBRE_TIENDA, direccion.id_direccion
                FROM temporal INNER JOIN direccion ON direccion.nombre_direccion = temporal.DIRECCION_TIENDA
                WHERE temporal.NOMBRE_TIENDA != '-';
            '''
            cur.execute(CHARGE_TABLE_TIENDA)
            # ------------------------- CREA LA TABLA EMPLEADO ------------------------- 
            TABLE_EMPLEADO = '''
            CREATE TABLE empleado(
                id_empleado INT GENERATED BY DEFAULT AS IDENTITY,
                nombre VARCHAR,
                apellido VARCHAR,
                correo VARCHAR,
                nombre_usuario VARCHAR,
                contrasena VARCHAR,
                estado VARCHAR,
                id_direccion INT,
                id_tienda INT,
                primary key (id_empleado),
                FOREIGN KEY (id_direccion) REFERENCES direccion(id_direccion),
                FOREIGN KEY (id_tienda) REFERENCES tienda(id_tienda)
            );'''
            cur.execute(TABLE_EMPLEADO)
            # LLENA LA TABLA EMPLEADO
            CHARGE_TABLE_EMPLEADO = '''
            INSERT INTO empleado(nombre,apellido,correo,nombre_usuario,contrasena,estado,id_direccion,id_tienda)
                SELECT DISTINCT ON(temporal.NOMBRE_EMPLEADO) split_part(temporal.NOMBRE_EMPLEADO,' ',1), split_part(temporal.NOMBRE_EMPLEADO,' ',2),temporal.CORREO_EMPLEADO,temporal.USUARIO_EMPLEADO,temporal.PASSWORD_EMPLEADO,temporal.EMPLEADO_ACTIVO,direccion.id_direccion,tienda.id_tienda 
                FROM temporal 
                    INNER JOIN direccion ON direccion.nombre_direccion = temporal.DIRECCION_EMPLEADO
                    INNER JOIN tienda ON tienda.nombre = temporal.TIENDA_EMPLEADO
                WHERE temporal.NOMBRE_EMPLEADO != '-';
            '''
            cur.execute(CHARGE_TABLE_EMPLEADO)
            # ------------------------- CREA LA TABLA ENCARGADO_TIENDA ------------------------- 
            TABLE_ENCARGADO_TIENDA = '''
            CREATE TABLE encargado_tienda(
                id_encargado_tienda INT GENERATED BY DEFAULT AS IDENTITY,
                id_empleado INT,
                id_tienda INT,
                PRIMARY KEY (id_encargado_tienda),
                FOREIGN KEY (id_empleado) REFERENCES empleado(id_empleado),
                FOREIGN KEY (id_tienda) REFERENCES tienda(id_tienda)
            ); '''
            cur.execute(TABLE_ENCARGADO_TIENDA)
            # LLENA LA TABLA ENCARGADO_TIENDA
            CHARGE_ENCARGADO_TIENDA = '''
            INSERT INTO encargado_tienda(id_empleado,id_tienda)
                SELECT DISTINCT empleado.id_empleado, tienda.id_tienda
                FROM temporal 
                    INNER JOIN empleado ON empleado.nombre = split_part(temporal.ENCARGADO_TIENDA,' ',1) and empleado.apellido = split_part(temporal.ENCARGADO_TIENDA,' ',2)
                    INNER JOIN tienda ON tienda.nombre = temporal.NOMBRE_TIENDA
            '''
            cur.execute(CHARGE_ENCARGADO_TIENDA)
            # ------------------------- CREA LA TABLA CLIENTE ------------------------- 
            TABLE_CLIENTE ='''
            CREATE TABLE cliente(
                id_cliente INT GENERATED BY DEFAULT AS IDENTITY,
                nombre VARCHAR,
                apellido VARCHAR,
                correo VARCHAR,
                fecha_registro VARCHAR,
                estado VARCHAR,
                id_direccion INT,
                id_tienda INT,
                PRIMARY KEY (id_cliente),
                FOREIGN KEY (id_direccion) REFERENCES direccion(id_direccion),
                FOREIGN KEY (id_tienda) REFERENCES tienda(id_tienda)
            );'''
            cur.execute(TABLE_CLIENTE)
            # LLENA LA TABLA CLIENTE
            CHARGE_TABLE_CLIENTE = '''
            INSERT INTO cliente(nombre,apellido,correo,fecha_registro,estado,id_direccion,id_tienda)
                SELECT DISTINCT ON(temporal.NOMBRE_CLIENTE) split_part(temporal.NOMBRE_CLIENTE,' ',1), split_part(temporal.NOMBRE_CLIENTE,' ',2),temporal.CORREO_CLIENTE,temporal.FECHA_CREACION,temporal.CLIENTE_ACTIVO,direccion.id_direccion,tienda.id_tienda 
                FROM temporal 
                    INNER JOIN direccion ON direccion.nombre_direccion = temporal.DIRECCION_CLIENTE
                    INNER JOIN tienda ON tienda.nombre = temporal.TIENDA_PREFERIDA
                WHERE temporal.NOMBRE_CLIENTE != '-';
            '''
            cur.execute(CHARGE_TABLE_CLIENTE)
            # ------------------------- CREA LA TABLA CLASIFICACION ------------------------- 
            TABLE_CLASIFICACION = '''
            CREATE TABLE clasificacion(
                id_clasificacion INT GENERATED BY DEFAULT AS IDENTITY,
                nombre_clasificacion VARCHAR,
                PRIMARY KEY(id_clasificacion)
            );
            '''
            cur.execute(TABLE_CLASIFICACION)
            # LLENA LA TABLA CLASIFICACION
            CHARGE_TABLE_CLASIFICACION = '''
            INSERT INTO clasificacion(nombre_clasificacion)
                SELECT DISTINCT ON(temporal.CLASIFICACION) temporal.CLASIFICACION FROM temporal
                WHERE temporal.CLASIFICACION != '-';
            ''' 
            cur.execute(CHARGE_TABLE_CLASIFICACION)
            # ------------------------- CREA LA TABLA PELICULA ------------------------- 
            TABLE_PELICULA = '''
            CREATE TABLE pelicula(
                id_pelicula INT GENERATED BY DEFAULT AS IDENTITY,
                titulo VARCHAR,
                descripcion VARCHAR,
                lanzamiento VARCHAR,
                duracion VARCHAR, 
                dias_renta VARCHAR,
                costo_renta VARCHAR,
                costo_por_damage VARCHAR,
                id_clasificacion INT,
                PRIMARY KEY(id_pelicula),
                FOREIGN KEY(id_clasificacion) REFERENCES clasificacion(id_clasificacion)
            );
            '''
            cur.execute(TABLE_PELICULA)
            # LLENA LA TABLA PELICULA
            CHARGE_TABLE_PELICULA = '''
            INSERT INTO pelicula(titulo,descripcion,lanzamiento,duracion,dias_renta,costo_renta,costo_por_damage,id_clasificacion)
                SELECT DISTINCT ON(temporal.NOMBRE_PELICULA) temporal.NOMBRE_PELICULA,temporal.DESCRIPCION_PELICULA,temporal.LANZAMIENTO_YEAR,temporal.DURACION,temporal.DIAS_RENTA,temporal.COSTO_RENTA, temporal.COSTO_POR_DAMAGE,clasificacion.id_clasificacion 
                FROM temporal
                    INNER JOIN clasificacion ON clasificacion.nombre_clasificacion = temporal.CLASIFICACION
                WHERE temporal.NOMBRE_PELICULA != '-';
            '''
            cur.execute(CHARGE_TABLE_PELICULA)
            # ------------------------- CREA LA TABLA LENGUAJE ------------------------- 
            TABLE_LENGUAJE = '''
            CREATE TABLE lenguaje(
                id_lenguaje INT GENERATED BY DEFAULT AS IDENTITY,
                nombre_lenguaje VARCHAR,
                PRIMARY KEY(id_lenguaje)
            );
            '''
            cur.execute(TABLE_LENGUAJE)
            # LLENA LA TABLA LENGUAJE
            CHARGE_TABLE_LENGUAJE = '''
            INSERT INTO lenguaje(nombre_lenguaje)
                SELECT DISTINCT ON(temporal.LENGUAJE_PELICULA) temporal.LENGUAJE_PELICULA FROM temporal
                WHERE temporal.LENGUAJE_PELICULA != '-';    
            '''
            cur.execute(CHARGE_TABLE_LENGUAJE)
            # ------------------------- CREA LA TABLA CATEGORIA ------------------------- 
            TABLE_CATEGORIA = '''
            CREATE TABLE categoria(
                id_categoria INT GENERATED BY DEFAULT AS IDENTITY,
                nombre_categoria VARCHAR,
                PRIMARY KEY(id_categoria)
            );
            '''
            cur.execute(TABLE_CATEGORIA)
            # LLENA LA TABLA CATEGORIA
            CHARGE_TABLE_CATEGORIA = '''
            INSERT INTO categoria(nombre_categoria)
                SELECT DISTINCT ON(temporal.CATEGORIA_PELICULA) temporal.CATEGORIA_PELICULA FROM temporal
                WHERE temporal.CATEGORIA_PELICULA != '-';
            '''
            cur.execute(CHARGE_TABLE_CATEGORIA)
            # ------------------------- CREA LA TABLA ACTOR ------------------------- 
            TABLE_ACTOR = '''
            CREATE TABLE actor(
                id_actor INT GENERATED BY DEFAULT AS IDENTITY,
                nombre_actor VARCHAR,
                PRIMARY KEY(id_actor)
            );
            '''
            cur.execute(TABLE_ACTOR)
            # LLENA LA TABLA ACTOR
            CHARGE_TABLE_ACTOR = '''
            INSERT INTO actor(nombre_actor)
                SELECT DISTINCT ON(temporal.ACTOR_PELICULA) temporal.ACTOR_PELICULA FROM temporal
                WHERE temporal.ACTOR_PELICULA != '-';
            '''
            cur.execute(CHARGE_TABLE_ACTOR)
            # ------------------------- CREA LA TABLA LENGUAJE_PELICULA ------------------------- 
            TABLE_LENGUAJE_PELICULA = '''
            CREATE TABLE lenguaje_pelicula(
                id_lenguaje_pelicula INT GENERATED BY DEFAULT AS IDENTITY,
                id_lenguaje INT,
                id_pelicula INT,
                PRIMARY KEY(id_lenguaje_pelicula),
                FOREIGN KEY(id_lenguaje) REFERENCES lenguaje(id_lenguaje),
                FOREIGN KEY(id_pelicula) REFERENCES pelicula(id_pelicula)
            );
            '''
            cur.execute(TABLE_LENGUAJE_PELICULA)
            # LLENA LA TABLA LENGUAJE_PELICULA
            CHARGE_TABLE_LENGUAJE_PELICULA = '''
            INSERT INTO lenguaje_pelicula(id_lenguaje,id_pelicula)
                SELECT DISTINCT lenguaje.id_lenguaje, pelicula.id_pelicula
                FROM temporal 
                    INNER JOIN lenguaje ON lenguaje.nombre_lenguaje = temporal.LENGUAJE_PELICULA
                    INNER JOIN pelicula ON pelicula.titulo = temporal.NOMBRE_PELICULA
            '''
            cur.execute(CHARGE_TABLE_LENGUAJE_PELICULA)
            # ------------------------- CREA LA TABLA CATEGORIA_PELICULA ------------------------- 
            TABLE_CATEGORIA_PELICULA = '''
            CREATE TABLE categoria_pelicula(
                id_categoria_pelicula INT GENERATED BY DEFAULT AS IDENTITY,
                id_pelicula INT,
                id_categoria INT,
                PRIMARY KEY(id_categoria_pelicula),
                FOREIGN KEY(id_pelicula) REFERENCES pelicula(id_pelicula),
                FOREIGN KEY(id_categoria) REFERENCES categoria(id_categoria)
            );
            '''
            cur.execute(TABLE_CATEGORIA_PELICULA)
            # LLENA LA TABLA CATEGORIA_PELICULA
            CHARGE_TABLE_CATEGORIA_PELICULA = '''
            INSERT INTO categoria_pelicula(id_pelicula, id_categoria)
            SELECT DISTINCT pelicula.id_pelicula, categoria.id_categoria
            FROM temporal 
                INNER JOIN pelicula ON pelicula.titulo = temporal.NOMBRE_PELICULA
                INNER JOIN categoria ON categoria.nombre_categoria = temporal.CATEGORIA_PELICULA
            '''
            cur.execute(CHARGE_TABLE_CATEGORIA_PELICULA)
            # ------------------------- CREA LA TABLA ACTOR_PELICULA ------------------------- 
            TABLE_ACTOR_PELICULA = '''
            CREATE TABLE actor_pelicula(
                id_actor_pelicula INT GENERATED BY DEFAULT AS IDENTITY,
                id_pelicula INT,
                id_actor INT,
                PRIMARY KEY(id_actor_pelicula),
                FOREIGN KEY(id_pelicula) REFERENCES pelicula(id_pelicula),
                FOREIGN KEY(id_actor) REFERENCES actor(id_actor)
            );
            '''
            cur.execute(TABLE_ACTOR_PELICULA)
            # LLENA LA TABLA ACTOR_PELICULA
            CHARGE_TABLE_ACTOR_PELICULA = '''
            INSERT INTO actor_pelicula(id_pelicula, id_actor)
                SELECT DISTINCT pelicula.id_pelicula, actor.id_actor
                FROM temporal 
                    INNER JOIN pelicula ON pelicula.titulo = temporal.NOMBRE_PELICULA
                    INNER JOIN actor ON actor.nombre_actor = temporal.ACTOR_PELICULA                   
            '''
            cur.execute(CHARGE_TABLE_ACTOR_PELICULA)
            # ------------------------- CREA LA TABLA INVENTARIO ------------------------- 
            TABLE_INVENTARIO = '''
            CREATE TABLE inventario(
                id_inventario INT GENERATED BY DEFAULT AS IDENTITY,
                id_pelicula INT,
                id_tienda INT,
                PRIMARY KEY(id_inventario),
                FOREIGN KEY(id_pelicula) REFERENCES pelicula(id_pelicula),
                FOREIGN KEY(id_tienda) REFERENCES tienda(id_tienda)
            );
            '''
            cur.execute(TABLE_INVENTARIO)
            # LLENA LA TABLA INVENTARIO
            CHARGE_TABLE_INVENTARIO = '''
            INSERT INTO inventario(id_pelicula, id_tienda)
                SELECT DISTINCT pelicula.id_pelicula, tienda.id_tienda
                FROM temporal 
                    INNER JOIN pelicula ON pelicula.titulo = temporal.NOMBRE_PELICULA
                    INNER JOIN tienda ON tienda.nombre = temporal.TIENDA_PELICULA
            '''
            cur.execute(CHARGE_TABLE_INVENTARIO)
            # ------------------------- RENTA ------------------------- 
            TABLE_RENTA = '''
            CREATE TABLE renta(
                id_renta INT GENERATED BY DEFAULT AS IDENTITY,
                monto VARCHAR,
                fecha_pago VARCHAR,
                fecha_renta VARCHAR,
                fecha_retorno VARCHAR,
                id_empleado INT,
                id_tienda INT,
                id_cliente INT,
                PRIMARY KEY(id_renta),
                FOREIGN KEY(id_empleado) REFERENCES empleado(id_empleado),
                FOREIGN KEY(id_tienda) REFERENCES tienda(id_tienda),
                FOREIGN KEY(id_cliente) REFERENCES cliente(id_cliente)
            );
            '''
            cur.execute(TABLE_RENTA)
            # LLENA LA TABLA RENTA
            CHARGE_TABLE_RENTA = '''
            INSERT INTO renta(monto,fecha_pago,fecha_renta,fecha_retorno,id_empleado,id_tienda,id_cliente)
            SELECT DISTINCT temporal.MONTO_A_PAGAR,temporal.FECHA_PAGO,temporal.FECHA_RENTA,temporal.FECHA_RETORNO,empleado.id_empleado,tienda.id_tienda,cliente.id_cliente
            FROM temporal
                INNER JOIN empleado ON empleado.nombre = split_part(temporal.NOMBRE_EMPLEADO,' ',1) and empleado.apellido = split_part(temporal.NOMBRE_EMPLEADO,' ',2)
                INNER JOIN tienda ON tienda.nombre = temporal.TIENDA_PELICULA
                INNER JOIN cliente ON cliente.nombre = split_part(temporal.NOMBRE_CLIENTE,' ',1) and cliente.apellido = split_part(temporal.NOMBRE_CLIENTE,' ',2)
    
            '''
            cur.execute(CHARGE_TABLE_RENTA)

            CONECTION.commit()
        except Exception as e:
            return f"{e}"
        return "SE CREÓ SUS RESPECTIVOS MODELOS Y DATOS CORRESPONDIENTES A CADA MODELO."


    if __name__ == "__main__":
        app.run(debug=True, host="0.0.0.0")        

except Exception as e:
    print(f"WARNING! - {e}")
